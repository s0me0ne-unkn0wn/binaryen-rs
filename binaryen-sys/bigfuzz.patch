diff --git a/src/tools/fuzzing.h b/src/tools/fuzzing.h
index d2cdb7a7f..9fba4ffa8 100644
--- a/src/tools/fuzzing.h
+++ b/src/tools/fuzzing.h
@@ -218,35 +218,35 @@ private:
   bool finishedInput;
 
   // The maximum amount of params to each function.
-  static const int MAX_PARAMS = 10;
+  static const int MAX_PARAMS = 256;
 
   // The maximum amount of vars in each function.
-  static const int MAX_VARS = 20;
+  static const int MAX_VARS = 256;
 
   // The maximum number of globals in a module.
-  static const int MAX_GLOBALS = 20;
+  static const int MAX_GLOBALS = 256;
 
   // The maximum number of tuple elements.
-  static const int MAX_TUPLE_SIZE = 6;
+  static const int MAX_TUPLE_SIZE = 256;
 
   // some things require luck, try them a few times
-  static const int TRIES = 10;
+  static const int TRIES = 100;
 
   // beyond a nesting limit, greatly decrease the chance to continue to nest
-  static const int NESTING_LIMIT = 11;
+  static const int NESTING_LIMIT = 65;
 
   // the maximum size of a block
-  static const int BLOCK_FACTOR = 5;
+  static const int BLOCK_FACTOR = 50;
 
   // the memory that we use, a small portion so that we have a good chance of
   // looking at writes (we also look outside of this region with small
   // probability) this should be a power of 2
-  static const int USABLE_MEMORY = 16;
+  static const int USABLE_MEMORY = 64;
 
   // the number of runtime iterations (function calls, loop backbranches) we
   // allow before we stop execution with a trap, to prevent hangs. 0 means
   // no hang protection.
-  static const int HANG_LIMIT = 10;
+  static const int HANG_LIMIT = 100;
 
   // Whether to emit memory operations like loads and stores.
   bool allowMemory = true;
